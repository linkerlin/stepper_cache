import*as e from"app";var a={d:(e,t)=>{for(var c in t)a.o(t,c)&&!a.o(e,c)&&Object.defineProperty(e,c,{enumerable:!0,get:t[c]})},o:(e,a)=>Object.prototype.hasOwnProperty.call(e,a)};var t,c;(t={default:()=>e.default},c={},a.d(c,t),c).default.initializers.add("halomaster/stepper-cache",(()=>{"serviceWorker"in navigator&&(navigator.serviceWorker.addEventListener("message",(e=>{"CACHE_UPDATED"===e.data.type&&console.log("[Stepper Cache] Cache updated:",e.data.url)})),window.addEventListener("load",(async()=>{try{const e=await navigator.serviceWorker.ready,a=await window.caches.keys();console.log("[Stepper Cache] Active caches:",a),console.log("[Stepper Cache] Service Worker status:",e.active?"active":"inactive")}catch(e){console.error("[Stepper Cache] Status check failed:",e)}}))),window.stepperCache={clearAll:async()=>{try{const e=await caches.keys();await Promise.all(e.filter((e=>e.startsWith("stepper-"))).map((e=>caches.delete(e)))),console.log("[Stepper Cache] All caches cleared")}catch(e){console.error("[Stepper Cache] Failed to clear caches:",e)}},getStats:async()=>{try{const e={caches:{},totalSize:0},a=await caches.keys();for(const t of a.filter((e=>e.startsWith("stepper-")))){const a=await caches.open(t),c=await a.keys();e.caches[t]=c.length}return console.log("[Stepper Cache] Cache stats:",e),e}catch(e){return console.error("[Stepper Cache] Failed to get cache stats:",e),null}}}}));